// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * zfs pool resource.
 */
export class Pool extends pulumi.CustomResource {
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PoolState, opts?: pulumi.CustomResourceOptions): Pool {
        return new Pool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zfs:index/pool:Pool';

    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Pool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }

    /**
     * Defines a striped vdev
     */
    public readonly devices!: pulumi.Output<outputs.PoolDevice[] | undefined>;
    /**
     * Defines a mirrored vdev
     */
    public readonly mirrors!: pulumi.Output<outputs.PoolMirror[] | undefined>;
    /**
     * Name of the zpool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Formatted versions of all zfs properties.
     */
    public /*out*/ readonly properties!: pulumi.Output<{[key: string]: any}>;
    /**
     * Propert(y/ies) to set
     */
    public readonly property!: pulumi.Output<outputs.PoolProperty[] | undefined>;
    /**
     * Which properties to manage. "defined" means only manage the properties explicitly defined in the resource. This is the
     * default. "native" means manage all native zfs properties, but leave user properties alone (see man zfsprops for more
     * info about these types of properties). This means all properties that aren't defined in the terraform resource but that
     * are explicitly overriden on the zfs resource will be set back to inherit from their parent/the default. "all" is like
     * "native", but also includes user properties. Be careful when removing/altering properties you don't recognize as some
     * tools might use user properties to track information important for that tool to work properly with a given resource.
     * Note that some properties don't have a default that they can be compared/reset to (notably most of the zpool
     * properties). These properties will only ever be managed when explicitly defined, and will be left as they are when they
     * stop being defined.
     */
    public readonly propertyMode!: pulumi.Output<string | undefined>;
    /**
     * Parseable versions of all zfs properties.
     */
    public /*out*/ readonly rawProperties!: pulumi.Output<{[key: string]: any}>;

    /**
     * Create a Pool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PoolArgs | PoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PoolState | undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["mirrors"] = state ? state.mirrors : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["property"] = state ? state.property : undefined;
            resourceInputs["propertyMode"] = state ? state.propertyMode : undefined;
            resourceInputs["rawProperties"] = state ? state.rawProperties : undefined;
        } else {
            const args = argsOrState as PoolArgs | undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["mirrors"] = args ? args.mirrors : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["property"] = args ? args.property : undefined;
            resourceInputs["propertyMode"] = args ? args.propertyMode : undefined;
            resourceInputs["properties"] = undefined /*out*/;
            resourceInputs["rawProperties"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Pool resources.
 */
export interface PoolState {
    /**
     * Defines a striped vdev
     */
    devices?: pulumi.Input<pulumi.Input<inputs.PoolDevice>[]>;
    /**
     * Defines a mirrored vdev
     */
    mirrors?: pulumi.Input<pulumi.Input<inputs.PoolMirror>[]>;
    /**
     * Name of the zpool.
     */
    name?: pulumi.Input<string>;
    /**
     * Formatted versions of all zfs properties.
     */
    properties?: pulumi.Input<{[key: string]: any}>;
    /**
     * Propert(y/ies) to set
     */
    property?: pulumi.Input<pulumi.Input<inputs.PoolProperty>[]>;
    /**
     * Which properties to manage. "defined" means only manage the properties explicitly defined in the resource. This is the
     * default. "native" means manage all native zfs properties, but leave user properties alone (see man zfsprops for more
     * info about these types of properties). This means all properties that aren't defined in the terraform resource but that
     * are explicitly overriden on the zfs resource will be set back to inherit from their parent/the default. "all" is like
     * "native", but also includes user properties. Be careful when removing/altering properties you don't recognize as some
     * tools might use user properties to track information important for that tool to work properly with a given resource.
     * Note that some properties don't have a default that they can be compared/reset to (notably most of the zpool
     * properties). These properties will only ever be managed when explicitly defined, and will be left as they are when they
     * stop being defined.
     */
    propertyMode?: pulumi.Input<string>;
    /**
     * Parseable versions of all zfs properties.
     */
    rawProperties?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a Pool resource.
 */
export interface PoolArgs {
    /**
     * Defines a striped vdev
     */
    devices?: pulumi.Input<pulumi.Input<inputs.PoolDevice>[]>;
    /**
     * Defines a mirrored vdev
     */
    mirrors?: pulumi.Input<pulumi.Input<inputs.PoolMirror>[]>;
    /**
     * Name of the zpool.
     */
    name?: pulumi.Input<string>;
    /**
     * Propert(y/ies) to set
     */
    property?: pulumi.Input<pulumi.Input<inputs.PoolProperty>[]>;
    /**
     * Which properties to manage. "defined" means only manage the properties explicitly defined in the resource. This is the
     * default. "native" means manage all native zfs properties, but leave user properties alone (see man zfsprops for more
     * info about these types of properties). This means all properties that aren't defined in the terraform resource but that
     * are explicitly overriden on the zfs resource will be set back to inherit from their parent/the default. "all" is like
     * "native", but also includes user properties. Be careful when removing/altering properties you don't recognize as some
     * tools might use user properties to track information important for that tool to work properly with a given resource.
     * Note that some properties don't have a default that they can be compared/reset to (notably most of the zpool
     * properties). These properties will only ever be managed when explicitly defined, and will be left as they are when they
     * stop being defined.
     */
    propertyMode?: pulumi.Input<string>;
}
