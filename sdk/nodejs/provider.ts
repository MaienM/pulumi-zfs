// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The provider type for the zfs package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export class Provider extends pulumi.ProviderResource {
    /** @internal */
    public static readonly __pulumiType = 'zfs';

    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Provider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Provider.__pulumiType;
    }

    /**
     * Can be used to prefix all ssh commands issued on the target host. For example, a command_prefix of 'sudo' can be used to
     * elevate privileges on the target host, assuming password-less is configured for the user
     */
    public readonly commandPrefix!: pulumi.Output<string | undefined>;
    public readonly host!: pulumi.Output<string>;
    public readonly key!: pulumi.Output<string | undefined>;
    public readonly keyPassphrase!: pulumi.Output<string | undefined>;
    public readonly keyPath!: pulumi.Output<string | undefined>;
    public readonly password!: pulumi.Output<string | undefined>;
    public readonly port!: pulumi.Output<string>;
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProviderArgs, opts?: pulumi.ResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        {
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["commandPrefix"] = args ? args.commandPrefix : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["keyPassphrase"] = args ? args.keyPassphrase : undefined;
            resourceInputs["keyPath"] = args ? args.keyPath : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Provider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    /**
     * Can be used to prefix all ssh commands issued on the target host. For example, a command_prefix of 'sudo' can be used to
     * elevate privileges on the target host, assuming password-less is configured for the user
     */
    commandPrefix?: pulumi.Input<string>;
    host: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyPassphrase?: pulumi.Input<string>;
    keyPath?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    port: pulumi.Input<string>;
    user: pulumi.Input<string>;
}
